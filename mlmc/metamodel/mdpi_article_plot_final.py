import numpy as np
import matplotlib
import matplotlib.pyplot as plt

#########################################################
####  Cost and moments MSE for different mesh sizes   ###
#########################################################

from matplotlib.lines import Line2D
from matplotlib.patches import Rectangle, RegularPolygon, FancyBboxPatch

matplotlib.rcParams.update({'font.size': 13})

fig, ax1 = plt.subplots(figsize=(8, 5))

################################
### Original MC data         ###
################################
cost_mc = [93939, 133361, 322819, 2271723, 15179051, 31447680]   # original mc
cost_mc_data = [
    [93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517, 93939.08929409517],
    [133361.00265841364, 133361.00265841364, 133361.00265841364, 133361.00265841364, 133361.00265841364,
     133361.00265841364, 133361.00265841364, 133361.00265841364, 133361.00265841364, 133361.00265841364,
     133361.00265841364],
    [322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851,
     322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851, 322819.1311979851],
[2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486,
 2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486, 2271723.5693927486],
[15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605,
 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605, 15179051.199180605],
[31447680.98604204, 31447680.98604204, 31447680.98604204, 31447680.98604204, 31447680.98604204, 31447680.98604204]

]

##########################
### Replace level data ###
##########################
mom_MSE_mc_nn = [0.0014512050233236355, 0.0016877664575074313, 0.0010495706188777415, 0.0014058380862699575, 0.0018142238071130795, 0.0014854059739955086] # replace level

mom_MSE_mc_nn_data = [[0.0014311061148702228, 0.0013260997535777226, 0.0014638501775351735, 0.0010511849448391522, 0.0012181902258344296, 0.0016988454133434084, 0.001307548739455466, 0.001428755857667577, 0.0015875041102383844, 0.0021308684630892217, 0.0011047960630993115, 0.0016657104163335548],
                      [0.0019222872970857056, 0.0012880860881635964, 0.0016700733965380771, 0.0014593301177679091, 0.0011905676934671357, 0.0011948904992596845, 0.001855350401698919, 0.002050087843691782, 0.001947193375795821, 0.003005909915780389, 0.0013106020128817219, 0.0013588188479584336],
[0.001159804850502039, 0.0006575774056418325, 0.0014558440366046678, 0.001003858110467351, 0.0011746659954735296, 0.0008343627281320446, 0.0009125611740832304, 0.0009445566218742684, 0.0016801011026723297, 0.0010196189316117091, 0.0009785568655752514, 0.0007733396038946478],
[0.0017491662841487053, 0.0011188083206183253, 0.00146650368175573, 0.0009026317281250243, 0.0010258473492099384, 0.0013340944168043387, 0.0018213779995912786, 0.00102722412066858, 0.0015951913581812088, 0.0026338008818065956, 0.0012595880206301723, 0.0009358228736995903],
[0.0015993625287229812, 0.001805107369942001, 0.002848834288722617, 0.0010140756678116466, 0.003603554403692221, 0.0011241211499577765, 0.0018328594108743602, 0.0013128432323585503, 0.0014282209286245575, 0.0023235214022764663, 0.0017637804796509088, 0.002217107347562519, 0.001117607041885459, 0.001408138047501044],
                      [0.001480401474954299, 0.0014679550315711695, 0.001411513396426807, 0.0013589981086265595, 0.0016037928643591564, 0.0015897749680350596]

                      ]

cost_nn = [11612.536352555291, 16369.374100069028,  41418.75373649193, 300037.1462084534,  1910912.6731934547,  3676294.9990359205]      # replace level
cost_nn_data = [[12733.800367991416, 12399.318676666708, 11204.768828132283, 12295.90436979183, 11037.177184033899, 12568.895837026954, 9773.513233957761, 13068.891719978854, 11149.032074942917, 11504.200263024002, 11115.383040861387, 10499.550634255484],
                [16439.93010847331, 17859.58927702679, 15972.982133940164, 18313.080450243455, 16159.000599063726,
                 14352.066030362455, 16301.260759133089, 15100.133989816897, 14867.21091184259, 17317.296878007666,
                 17380.56396284918],
[42897.77270255188, 44106.78592952902, 37921.70179710023, 39539.262659667496, 42777.24069926197, 41938.17815821641, 38072.54008612143, 42669.82831190013, 42343.7888724759, 42925.02169327508, 41705.937241228145, 40126.986686575554],
[294546.5144079141, 307212.23591865954, 278058.7571090793, 279490.9345452117, 263043.9178130424, 276874.0592053415, 301945.17708984937, 456931.65226963826, 281424.33784732403, 295015.335259066, 263580.67342787475, 302322.1596084401],
                [1616282.7666721654, 2050722.63244024, 2050205.4559111872, 1829380.984591151, 1908759.8952131828,
                 2164622.1074268064, 2001185.848390191, 1857362.768237878, 2149771.8871434736, 1834823.9349498628,
                 1712635.8735825373, 1862904.5754662168, 1803206.0214900186],
[3797805.0127742263, 3627866.124591209, 3487242.555143576, 3284864.6377182, 3849883.805963522, 4010107.8580247858]


                ]


###########################
### Add level data      ###
###########################
mom_MSE_mc_mc_nn = [1.0531318984830828e-05, 1.0051933936411044e-05, 9.692190520641208e-06, 1.4429073421111442e-05, 2.0926045556658515e-05,  8.705660497910736e-06] # add level

mom_MSE_mc_mc_nn_data = [[1.510371446142081e-05, 9.454852159532225e-06, 9.227999782889805e-06, 8.47848683035725e-06, 4.717272703928769e-06, 1.3173791157845087e-05, 1.4863690717259208e-05, 1.0268889753309459e-05, 6.889279235466642e-06, 1.844157757402981e-05, 6.080162747611685e-06, 9.676110694319178e-06],
[9.451651684096435e-06, 5.4323041397861655e-06, 1.1197394661153059e-05, 1.537387508120736e-05, 9.13828036793656e-06, 6.096744800392414e-06, 9.860460761680792e-06, 1.3373768668155806e-05, 4.1297728457397625e-06, 1.8177626128601185e-05, 5.784871054092165e-06, 1.2606457044090829e-05],
[2.1258562887441694e-05, 9.874593136874029e-06, 1.0559542200564569e-05, 5.949424323823413e-06, 1.0607888370137812e-05, 9.307098912150291e-06, 9.631985217250365e-06, 1.4699138491510453e-05, 3.6131911868028877e-06, 8.203957868228548e-06, 6.5071456436951705e-06, 6.093758009215272e-06],
[4.768448621076674e-06, 1.1745787758169042e-05, 2.3456002844025048e-05, 3.9853078817259274e-06, 2.6221010010399284e-05, 1.6818195730564667e-05, 1.3055056515743158e-05, 1.1279583135699479e-05, 1.2753497942315666e-05, 1.0976042121694112e-05, 2.3539263044242932e-05, 1.4550685447681319e-05],
[1.6644444940241232e-05, 2.556045171745549e-05, 1.464778934851926e-05, 7.2521615022790475e-06, 1.7065171853136068e-05, 1.3047722262242855e-05, 2.4697623301043128e-05, 1.1775219473910933e-05, 3.167956787432639e-05, 2.294351993237469e-05, 2.1990318264857653e-05, 5.216600694769534e-05, 1.0235270949170435e-05, 2.3259369425966653e-05],
[9.323244260687604e-06, 1.9403354929852982e-06, 1.528633339888035e-05, 3.148042153199205e-06, 5.374138686274121e-06, 5.161868995437833e-06]

                         ]


cost_mc_nn = [72269.51469188363, 98083.34523470189, 227334.02594938874, 1636436.2410373054,  12395110.637672255, 22435492.468006324] # add level

cost_mc_nn_data = [[68335.13183573128, 78498.82986473692, 74926.06553434783, 80276.25155611857, 69521.10793873997, 84528.13209129887, 67223.24189718324, 78169.455037039, 63506.76933536828, 73431.5610795678, 58429.559029784345, 70388.07110268739],
                   [112338.07980796047, 112873.38351237602, 100189.12138103583, 101052.48574613647, 87270.2787777867,
                    72581.5773015088, 96021.37089898811, 81995.64699696808, 97456.05200421876, 108353.99932239126,
                    108784.80183235028],
[262936.818933684, 253861.9013041978, 198295.78833814032, 229277.06237437663, 227217.66485536302, 228199.48408748908, 151024.28667837626, 227853.23276174575, 222035.42494871657, 269038.3193906433, 230900.00265309666, 227368.32506683585],
[1688907.4762595235, 1362098.4606998274, 1749693.3011178006, 1486133.2913077006, 1443869.0984102625, 1742217.6462337645, 1700303.3039168362, 1167810.2844866978, 1769909.6363744542, 2526289.7467697836, 1367230.3682708743, 1632772.2786001374],
                   [10646867.29672074, 24871948.392046254, 12192770.674672239, 11951917.598408625, 11209067.790941883,
                    12159518.504738333, 11656010.557367912, 11211516.018076437, 11859380.563797828, 11801891.98576572,
                    10829981.903842855, 10391448.400452193, 10354118.602908272],
[20289463.049280245, 20769008.516191572, 18077007.21216902, 25150161.628339455, 23958061.684311204, 26369252.71774642]




]


# print("cost_mc_nn / cost_mc  = {}".format(np.array(cost_mc_nn)/np.array(cost_mc)))
# exit()

# mom_MSE_mc_mc_nn = []
# for l_m in mom_MSE_mc_mc_nn_data:
#     mom_MSE_mc_mc_nn.append(np.mean(l_m[:3]))
#
# print("mom_MSE_mc_mc_nn ", mom_MSE_mc_mc_nn)


#ax1.set_xticks([53, 115, 474, 2714, 10481])

# ax1.scatter([53, 115, 474, 2714, 10481], cost_mc, label="original MC cost", color="black", marker="s")
# ax1.scatter([53, 115, 474, 2714, 10481], cost_nn, label="replace level cost", marker="o")
# ax1.scatter([53, 115, 474, 2714, 10481], cost_mc_nn, label="add level", marker="v")

cost_nn_data_yerr = []
for cost_rel in cost_nn_data:
    cost_nn_data_yerr.append(np.sqrt(np.var(cost_rel)))

cost_mc_nn_data_yerr = []
for cost_rel in cost_mc_nn_data:
    cost_mc_nn_data_yerr.append(np.sqrt(np.var(cost_rel)))


color = 'tab:blue'
# line1, = ax1.plot([53, 115, 474, 2714, 10481], cost_mc, label="MC", marker="s", color=color)
# line2, = ax1.plot([53, 115, 474, 2714, 10481], cost_nn, yerr=cost_nn_data_yerr, label="MC-M", marker="o", color=color)
# line3, = ax1.plot([53, 115, 474, 2714, 10481], cost_mc_nn, yerr=cost_mc_nn_data_yerr, label="MLMC-M", marker="v", color=color, linestyle="dashed")

labels = ["MC", "MC-M", "MLMC-M"]

mesh_n_ele = [53, 115, 474, 2714, 10481, 18397]

markersize = 8

cont_line1 = ax1.errorbar(mesh_n_ele , cost_mc, label=labels[0], marker="s", color=color, markersize=markersize)
cont_line2 = ax1.errorbar(mesh_n_ele, cost_nn, yerr=cost_nn_data_yerr, label=labels[1], marker="o", color=color, markersize=markersize)
cont_line3 = ax1.errorbar(mesh_n_ele, cost_mc_nn, yerr=cost_mc_nn_data_yerr, label=labels[2], marker="v", color=color, markersize=markersize)#, linestyle="dashed")

line1 = cont_line1[0]
line2 = cont_line2[0]
line3 = cont_line3[0]

ax1.tick_params(axis='y', labelcolor=color)
ax1.set_ylabel('$Cost(sec)$', color=color)


ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:red'
ax2.set_ylabel(r'$J(\hat{\mu}, \tilde{\mu})$', color=color)  # we already handled the x-label with ax1
# ax2.plot(t, data2, color=color)
# ax2.tick_params(axis='y', labelcolor=color)
ax2.set_xscale("log")

fig.tight_layout()

# ax2.plot([53, 115, 474, 2714, 10481], mom_MSE_mc_nn, label="replace level cost", color=color, marker='o')
# ax2.plot([53, 115, 474, 2714, 10481], mom_MSE_mc_mc_nn, label="add level", color=color, marker='v', linestyle="dashed")


mom_MSE_mc_nn_yerr = []
for mom_MSE_rel in mom_MSE_mc_nn_data:
    mom_MSE_mc_nn_yerr.append(np.sqrt(np.var(mom_MSE_rel)))

mom_MSE_mc_mc_nn_yerr = []
for mom_MSE_rel in mom_MSE_mc_mc_nn_data:
    mom_MSE_mc_mc_nn_yerr.append(np.sqrt(np.var(mom_MSE_rel)))

ax2.errorbar(mesh_n_ele , mom_MSE_mc_nn, yerr=mom_MSE_mc_nn_yerr, label="replace level cost", color=color, marker='o', markersize=markersize)
ax2.errorbar(mesh_n_ele , mom_MSE_mc_mc_nn, yerr=mom_MSE_mc_mc_nn_yerr, label="add level", color=color, marker='v', markersize=markersize)#, linestyle="dashed")

ax2.tick_params(axis='y', labelcolor=color)

ax1.set_yscale("log")
ax2.set_yscale("log")

ax1.set_xscale("log")
ax2.set_xscale("log")

ax1.set_xlabel('mesh elements')

#legend = ax1.legend()


ax1.legend(handles=[plt.plot([], ls="-", marker="s", color="black")[0],
                    plt.plot([], ls="-", marker="o", color="black")[0],
                    plt.plot([], ls="-", marker="v", color="black")[0]],
           #labels=[line1.get_label(), line2.get_label(), line3.get_label()], loc=(0,0.65))
            labels=labels, loc=(0,0.62))


# leg = plt.legend()
# print("leg.legendHandles ", leg.legendHandles)
# leg.legendHandles[0].set_color('black')
# leg.legendHandles[1].set_color('black')

plt.savefig("02_conc_cost_mse.pdf")
plt.show()







########################################################
########################################################
########################################################
###  Cost and moments MSE for different mesh sizes   ###
########################################################

matplotlib.rcParams.update({'font.size': 13})

fig, ax1 = plt.subplots(figsize=(8, 5))

n_moments = [2, 3, 5, 10, 15, 25, 35, 50, 75, 100]


## 2LMC - MC + nn level
# level params: nn, 0.02
L2MC_cost_mlmc_nn = np.array([6599253.48855415, 16186630.093244614, 22170601.967032377, 22369696.60202824, 22443976.262731403, 22489201.0857686, 22418339.908405434,
                   22444555.991266977, 22432748.295386653,  22456073.822879512])

L2MC_cost_mlmc = np.array([9379710.316262847, 28582465.03804018, 31447680.98604204, 31447680.98604204, 31447680.98604204,  31447680.98604204,  31447680.98604204,
                   31447680.98604204, 31447680.98604204,  31447680.98604204])

L2MC_cost_mlmc_nn_data = [
[6635427.4062138125, 6660332.123045857, 6415369.312557156, 6492752.39270577, 6714132.336607731, 6677507.360194574],
[16343608.788488256, 16132109.287325729, 16260772.817292597, 15553899.568021044, 17258690.806247756, 15570699.29209231],
[20299144.242078166, 20172641.420227155, 17360926.344227403, 25150161.628339455, 23671485.449575648, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 17682232.01630054, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 18127909.980519503, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 18399258.91874272, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 17974091.854563717, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 18131388.351732966, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 18060542.176451, 25150161.628339455, 23958061.684311204, 26369252.71774642],
[20289463.049280245, 20769008.516191572, 18200495.341408204, 25150161.628339455, 23958061.684311204, 26369252.71774642]
]

## 3LMC - 2 level mlmc + nn level
# level params: nn, 0.053, 0.02
L3MC_cost_mlmc_nn = np.array([2651857.3541797567,  5248920.608278458, 6519819.043137091, 6886607.800038467,  6886593.288854706, 6886826.581630043,
                              6886669.168609737, 6885730.7666080585, 6885744.758470333,  6886535.365676946])
L3MC_cost_mlmc_nn_data = np.array([
[2678576.4187586177, 2672210.399494933, 2711510.2252630205, 2627632.178357833, 2560159.255027665, 2661921.472617477, 2655783.13416399, 2709808.8861142336, 2559346.5299664545, 2758309.483835133, 2601827.714276118, 2625202.5522816023],
[5244999.611302663, 5375046.30358771, 5177957.610285709, 5139357.4637423195, 5051464.592732745, 5238568.821131179, 5207748.933420576, 5231599.713251799, 5082097.834895495, 5875194.545406505, 5233287.814942128, 5129724.054642668],
[6449432.006857992, 6645666.1099341735, 6412725.769872616, 6415485.197529199, 6362548.326389754, 6495254.484201286, 6471821.234421937, 6482892.990284823, 6310003.1321496405, 7074737.498500587, 6736195.807403304, 6381065.96009979],
[6931834.504288072, 6929355.356328996, 6759772.235043022, 6802066.891923402, 6741434.681612659, 6860514.872988215, 6840656.468938872, 6845105.192923374, 6963268.410858428, 7204174.041246297, 6948485.937295741, 6812625.007014528],
[6931908.370291822, 6929383.093681948, 6760021.4499035515, 6801630.604159802, 6741267.035593088, 6860704.753644032, 6840706.450230576, 6844734.0747110825, 6963338.520267294, 7204027.960152426, 6948689.141907996, 6812708.011712857],
[6932168.494358016, 6928943.543737288, 6760224.004731612, 6801841.839509159, 6741278.1463653585, 6860745.471945092, 6843059.016719211, 6844837.621488815, 6963154.021822909, 7204140.756946428, 6948543.204050103, 6812982.85788652],
[6931683.078980386, 6929246.805462901, 6760173.830599891, 6802039.097798487, 6741305.055936167, 6860773.234423088, 6840393.604367689, 6844985.004699219, 6963342.2102361815, 7204821.948979062, 6948668.82144677, 6812597.330386996],
[6932042.922151644, 6929501.439721212, 6760127.373070519, 6801765.022427797, 6741484.680087877, 6860446.392209159, 6840465.799566817, 6844892.552219101, 6952798.447898884, 7204242.458973806, 6948257.208279997, 6812744.902689891],
    [6931969.309744914, 6929338.713917224, 6759984.081376957, 6802053.921331774, 6741213.333527113, 6860953.860919574,
     6840419.520593017, 6844880.149629669, 6952676.721780762, 7204450.8423545305, 6948303.391146419, 6812693.255322043],
[6932131.561356142, 6929034.1524236, 6760062.3325294, 6801266.581120982, 6740782.732563803, 6860686.245325369, 6840723.110661144, 6844957.268955184, 6963163.246745128, 7204705.453929519, 6948471.158778487, 6812440.543734599]

])
L3MC_cost_mlmc = np.array([4459828.1137919575, 7286136.319481536, 9002544.647288606, 9554965.68246377,
                           9554965.68246377,  9554965.68246377,  9554965.68246377, 9554965.68246377, 9554965.68246377, 9554965.68246377])

#L3MC_mom_err = [6.0494e-05, 0.0001138, 0.00014756, 0.00017233, 0.00029846, 0.00049786, 0.00078174, 0.00091752]


## 4LMC - 3 level mlmc + nn level
# level params: nn, 0.1414, 0.053, 0.02
L4MC_cost_mlmc_nn = np.array([2506528.613167764, 2862290.404285498, 4610701.552809077, 5443839.112775543, 5678421.782455201, 5932210.097511216,  6155350.976010807, 6196781.205694067, 6422024.07810118, 6422497.085831466])
L4MC_cost_mlmc_nn_data = np.array([
[2529751.915817951, 2513458.7972362377, 2475051.2211629166, 2488509.603770391, 2509777.965287063, 2510857.4505536593, 2509727.7461642986, 2511685.903280261, 2497095.758887033, 2514336.341295157, 2507130.389442853, 2510960.2651153468],
[2862840.749826155, 2896536.264055377, 2849159.1278497623, 2850918.1404426135, 2861099.699037046, 2870273.1197260125, 2847841.4976519807, 2876221.5321337604, 2831671.7096946286, 2864764.4618449016, 2867650.134956943, 2868508.4142067926],
[4615756.418848434, 4690941.801127996, 4601828.346991932, 4610508.049926719, 4595931.195239497, 4598346.091320541, 4574251.352415428, 4584947.626022151, 4535641.252742222, 4574810.842421142, 4619320.147798958, 4726135.508853902],
[5439341.360833734, 5434905.164086185, 5379408.937298, 5464829.37320694, 5482062.267278267, 5432814.919605023, 5439862.417749632, 5470415.730126782, 5445507.710276841, 5385360.379596783, 5473332.354150116, 5478228.739098196],
[5673742.957756201, 5668507.851806873, 5615736.54781825, 5696985.962779918, 5714716.7807977125, 5668556.198663468, 5675656.492378054, 5699083.399328549, 5680161.366378333, 5621437.883466436, 5710131.705418955, 5716344.242869659],
[5928188.799369206, 5928147.812992824, 5876066.359337484, 5944278.556746211, 5962621.867910682, 5925466.929389418, 5928057.541772677, 5950155.774320203, 5930159.839183314, 5887733.886989217, 5957288.652749082, 5968355.149374271],
[6150297.7699204115, 6152310.302297727, 6101095.012313649, 6167694.605285883, 6182117.949073011, 6153698.334443677, 6149908.100737894, 6172825.391887622, 6152636.602934441, 6109597.860483004, 6182448.36364959, 6189581.419102775],
[6191185.6886095535, 6193139.9121659715, 6143898.964799783, 6208423.57975431, 6223040.455080414, 6194406.760674079, 6190748.407158814, 6216170.751116182, 6194052.572423173, 6152557.811151756, 6223289.012346268, 6230460.553048492],
    [6416194.239031665, 6420692.379927576, 6366603.916176813, 6435720.566284327, 6449968.927994536, 6419207.8723376915,
     6415599.177395096, 6436372.706226055, 6419761.936651964, 6377564.643838277, 6448794.801110571, 6457807.770239579],
    [6416255.061182017, 6420712.046216281, 6366569.298597131, 6435478.070020378, 6450145.089254217, 6422010.594975825,
     6415574.864747493, 6438428.586210659, 6420568.971077155, 6377607.36755844, 6448783.996540865, 6457831.083597131]
])
L4MC_cost_mlmc = np.array([3429045.891695123, 4126401.505452094, 5484442.844279231, 5846168.798251501,  6140824.915963505, 6429552.76339256, 6516951.463154868, 6516951.463154868, 6516951.463154868, 6516951.463154868])
#L4MC_mom_err = [4.5644e-06, 2.5661e-05, 6.4507e-05, 9.3355e-05, 0.00017192, 0.00050367, 0.00071144, 0.0012878]


line1, = ax1.plot(n_moments, L4MC_cost_mlmc_nn/L4MC_cost_mlmc, label="4LMC", marker="s")
line2, = ax1.plot(n_moments, L3MC_cost_mlmc_nn/L3MC_cost_mlmc, label="3LMC", marker="o")
line3, = ax1.plot(n_moments, L2MC_cost_mlmc_nn/L2MC_cost_mlmc, label="2LMC", marker="v")

ax1.set_xscale("log")
ax1.set_yscale("log")

ax1.set_ylabel('C MLMC / C MLMC + NN(s)')
ax1.set_xlabel('M')
plt.legend()
plt.savefig("MLMC_cost_saves.pdf")
plt.show()



fig, ax1 = plt.subplots(figsize=(8, 5))
line5, = ax1.plot(n_moments, L2MC_cost_mlmc, label="1LMC", color="green", marker="o",)
line6, = ax1.plot(n_moments, L2MC_cost_mlmc_nn, label="1LMC-M", color="green", marker='v', linestyle="dashed")
line3, = ax1.plot(n_moments, L3MC_cost_mlmc, label="2LMC", color="blue", marker="o")
line4, = ax1.plot(n_moments, L3MC_cost_mlmc_nn, label="2LMC-M", color="blue", marker='v', linestyle="dashed")
line1, = ax1.plot(n_moments, L4MC_cost_mlmc, label="3LMC", color="red", marker="o",)
line2, = ax1.plot(n_moments, L4MC_cost_mlmc_nn, label="3LMC-M",  color="red", marker='v', linestyle="dashed")


ax1.set_xscale("log")
ax1.set_yscale("log")

ax1.set_ylabel('Cost (sec)')
ax1.set_xlabel('R')
plt.legend()
plt.savefig("MLMC_costs.pdf")
plt.show()






# ###############################
# ###############################
# ##### Training time ###########
# ###############################
# fig, ax = plt.subplots(figsize=(8, 5))
#
#
# ###############
# ### 02 conc ###
# ###############
# ####  L2  ####
# n_training_samples = [100, 200, 500, 1000, 1500,  2500, 5000, 7500]
# mean_learning_time_cpu = []


# ####  L4  ####
# n_training_samples = [200, 500, 1000, 1500,  2500, 5000, 7500]
# mean_learning_time_cpu = [870, 909, 5233, 9377, 20635, 67308, 137676]
#
# # ax.set_yscale("log")
# #ax.set_xscale("log")
# ax.plot(n_training_samples, mean_learning_time_cpu)
# plt.show()
