import numpy as np
import matplotlib
import matplotlib.pyplot as plt

#########################################################
####  Cost and moments MSE for different mesh sizes   ###
#########################################################

from matplotlib.lines import Line2D
from matplotlib.patches import Rectangle, RegularPolygon, FancyBboxPatch

matplotlib.rcParams.update({'font.size': 13})

fig, ax1 = plt.subplots(figsize=(8, 5))

################################
### Original MC data         ###
################################
cost_mc = [101159, 146292, 335068, 2416022, 16004446]   # original mc
cost_mc_data = [

    [2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607, 2416022.372490607],
    [16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641, 16004446.141347641]
]



##########################
### Replace level data ###
##########################
mom_MSE_mc_nn = [0.0014512050233236355, 0.0016877664575074313, 0.0010495706188777415, 0.0014058380862699575, 0.0018142238071130795] # replace level

mom_MSE_mc_nn_data = [[0.0014311061148702228, 0.0013260997535777226, 0.0014638501775351735, 0.0010511849448391522, 0.0012181902258344296, 0.0016988454133434084, 0.001307548739455466, 0.001428755857667577, 0.0015875041102383844, 0.0021308684630892217, 0.0011047960630993115, 0.0016657104163335548],
                      [0.0019222872970857056, 0.0012880860881635964, 0.0016700733965380771, 0.0014593301177679091, 0.0011905676934671357, 0.0011948904992596845, 0.001855350401698919, 0.002050087843691782, 0.001947193375795821, 0.003005909915780389, 0.0013106020128817219, 0.0013588188479584336],
[0.001159804850502039, 0.0006575774056418325, 0.0014558440366046678, 0.001003858110467351, 0.0011746659954735296, 0.0008343627281320446, 0.0009125611740832304, 0.0009445566218742684, 0.0016801011026723297, 0.0010196189316117091, 0.0009785568655752514, 0.0007733396038946478],
[0.0017491662841487053, 0.0011188083206183253, 0.00146650368175573, 0.0009026317281250243, 0.0010258473492099384, 0.0013340944168043387, 0.0018213779995912786, 0.00102722412066858, 0.0015951913581812088, 0.0026338008818065956, 0.0012595880206301723, 0.0009358228736995903],
[0.0015993625287229812, 0.001805107369942001, 0.002848834288722617, 0.0010140756678116466, 0.003603554403692221, 0.0011241211499577765, 0.0018328594108743602, 0.0013128432323585503, 0.0014282209286245575, 0.0023235214022764663, 0.0017637804796509088, 0.002217107347562519, 0.001117607041885459, 0.001408138047501044]
                      ]

cost_nn = [12201,  17542, 41975,  286609, 1913140]      # replace level
cost_nn_data = [[12410.609732863291, 11335.329683095144, 12002.171835706842, 12467.148881868776, 11965.514947535929, 12569.279616031105, 12004.858829953035, 12467.11699400085, 12291.886612831597, 12261.925704983665, 12558.233993250287, 12078.275610717063],
                [17675.574262354057, 17595.559382440682, 17923.189625239247, 16915.56223859381, 17945.359646699217, 16524.7686094863, 18369.109165049606, 17110.837698897947, 18381.283085717874, 16429.033862198663, 17953.754329341056, 17082.08781971258],
[39645.70246901119, 41902.5028880358, 39585.43656315008, 40392.46508325072, 43329.40148631384, 41053.20598359267, 43124.05938918807, 43471.22586946375, 42725.012560959694, 42762.47810097403, 43489.29440703514, 42218.9462675784],
[291689.3283607343, 288648.53359997715, 282675.9892401347, 286719.9441508421, 287169.7974837076, 296452.55466336897, 292011.00340098486, 276409.8958934459, 278579.0638097965, 282470.53064416524, 283297.1376659066, 293194.48553866235],
[1861762.874300159, 1920056.067084175, 1848166.9108987593, 1917676.857952578, 1833501.78706915, 1906687.3714571137, 1965652.9784506713, 1932980.3377004366, 1963562.2844071498, 1941475.312623275, 1872136.5591376747, 1888106.8922487174, 2009330.578820361, 1922862.6499782458]
                ]


###########################
### Add level data      ###
###########################
mom_MSE_mc_mc_nn = [1.0531318984830828e-05, 1.0051933936411044e-05, 9.692190520641208e-06, 1.4429073421111442e-05, 2.0926045556658515e-05] # add level

mom_MSE_mc_mc_nn_data = [[1.510371446142081e-05, 9.454852159532225e-06, 9.227999782889805e-06, 8.47848683035725e-06, 4.717272703928769e-06, 1.3173791157845087e-05, 1.4863690717259208e-05, 1.0268889753309459e-05, 6.889279235466642e-06, 1.844157757402981e-05, 6.080162747611685e-06, 9.676110694319178e-06],
[9.451651684096435e-06, 5.4323041397861655e-06, 1.1197394661153059e-05, 1.537387508120736e-05, 9.13828036793656e-06, 6.096744800392414e-06, 9.860460761680792e-06, 1.3373768668155806e-05, 4.1297728457397625e-06, 1.8177626128601185e-05, 5.784871054092165e-06, 1.2606457044090829e-05],
[2.1258562887441694e-05, 9.874593136874029e-06, 1.0559542200564569e-05, 5.949424323823413e-06, 1.0607888370137812e-05, 9.307098912150291e-06, 9.631985217250365e-06, 1.4699138491510453e-05, 3.6131911868028877e-06, 8.203957868228548e-06, 6.5071456436951705e-06, 6.093758009215272e-06],
[4.768448621076674e-06, 1.1745787758169042e-05, 2.3456002844025048e-05, 3.9853078817259274e-06, 2.6221010010399284e-05, 1.6818195730564667e-05, 1.3055056515743158e-05, 1.1279583135699479e-05, 1.2753497942315666e-05, 1.0976042121694112e-05, 2.3539263044242932e-05, 1.4550685447681319e-05],
[1.6644444940241232e-05, 2.556045171745549e-05, 1.464778934851926e-05, 7.2521615022790475e-06, 1.7065171853136068e-05, 1.3047722262242855e-05, 2.4697623301043128e-05, 1.1775219473910933e-05, 3.167956787432639e-05, 2.294351993237469e-05, 2.1990318264857653e-05, 5.216600694769534e-05, 1.0235270949170435e-05, 2.3259369425966653e-05]
                         ]



cost_mc_nn = [63089,  91847,  199957, 1342260,  9899560] # add level

cost_mc_nn_data = [[63879.34068271679, 61114.37941436134, 66241.04206485959, 62743.179192795425, 62471.72030278582, 65311.57795861261, 61035.42331501706, 60715.499384383744, 64524.80495317874, 61819.78575027676, 64693.888515065366, 62523.85515930511],
[93983.00138611354, 91436.72632551494, 95759.21215792267, 86484.91464272073, 89518.74369349184, 93149.46515085558, 91733.73217772048, 91354.3614015416, 91366.53998305452, 94069.5343010251, 95127.31441757672, 88181.34674729905],
                   [197357.4826019167, 204922.32506762276, 192959.68634249357, 200931.30521597242, 202728.33985117765, 198768.8819380748, 199675.0844623243, 202200.14205188493, 199254.26226746058, 192311.72980906878, 203602.78868942344, 204767.2612316935],
                   [1358749.6663301561, 1346711.7000779426, 1296442.2801813767, 1306915.7201441333, 1279762.1494282112, 1327825.1363090042, 1318739.2456734101, 1313187.970460127, 1335420.7291643713, 1532465.1956214677,1365872.3003974531, 1325030.3491290081],
[9563125.235266628, 9184575.124837803, 11844728.342268975, 9531626.196158407, 10534910.993465554, 9705857.176193554, 9623123.98123953, 9711168.583913345, 9527544.663078915, 10510417.484134275, 9942378.312731355, 10087884.960971022, 9479934.64788208, 9346557.173142042]
]



#ax1.set_xticks([53, 115, 474, 2714, 10481])

# ax1.scatter([53, 115, 474, 2714, 10481], cost_mc, label="original MC cost", color="black", marker="s")
# ax1.scatter([53, 115, 474, 2714, 10481], cost_nn, label="replace level cost", marker="o")
# ax1.scatter([53, 115, 474, 2714, 10481], cost_mc_nn, label="add level", marker="v")

cost_nn_data_yerr = []
for cost_rel in cost_nn_data:
    cost_nn_data_yerr.append(np.sqrt(np.var(cost_rel)))

cost_mc_nn_data_yerr = []
for cost_rel in cost_mc_nn_data:
    cost_mc_nn_data_yerr.append(np.sqrt(np.var(cost_rel)))


color = 'tab:blue'
# line1, = ax1.plot([53, 115, 474, 2714, 10481], cost_mc, label="MC", marker="s", color=color)
# line2, = ax1.plot([53, 115, 474, 2714, 10481], cost_nn, yerr=cost_nn_data_yerr, label="MC-M", marker="o", color=color)
# line3, = ax1.plot([53, 115, 474, 2714, 10481], cost_mc_nn, yerr=cost_mc_nn_data_yerr, label="MLMC-M", marker="v", color=color, linestyle="dashed")

labels = ["MC", "MC-M", "MLMC-M"]

cont_line1 = ax1.errorbar([53, 115, 474, 2714, 10481], cost_mc, label=labels[0], marker="s", color=color)
cont_line2 = ax1.errorbar([53, 115, 474, 2714, 10481], cost_nn, yerr=cost_nn_data_yerr, label=labels[1], marker="o", color=color)
cont_line3 = ax1.errorbar([53, 115, 474, 2714, 10481], cost_mc_nn, yerr=cost_mc_nn_data_yerr, label=labels[2], marker="v", color=color, linestyle="dashed")

line1 = cont_line1[0]
line2 = cont_line2[0]
line3 = cont_line3[0]

ax1.tick_params(axis='y', labelcolor=color)
ax1.set_ylabel('$C(s)$', color=color)


ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:red'
ax2.set_ylabel(r'$J(\hat{\mu}, \tilde{\mu})$', color=color)  # we already handled the x-label with ax1
# ax2.plot(t, data2, color=color)
# ax2.tick_params(axis='y', labelcolor=color)
ax2.set_xscale("log")

fig.tight_layout()

# ax2.plot([53, 115, 474, 2714, 10481], mom_MSE_mc_nn, label="replace level cost", color=color, marker='o')
# ax2.plot([53, 115, 474, 2714, 10481], mom_MSE_mc_mc_nn, label="add level", color=color, marker='v', linestyle="dashed")


mom_MSE_mc_nn_yerr = []
for mom_MSE_rel in mom_MSE_mc_nn_data:
    mom_MSE_mc_nn_yerr.append(np.sqrt(np.var(mom_MSE_rel)))

mom_MSE_mc_mc_nn_yerr = []
for mom_MSE_rel in mom_MSE_mc_mc_nn_data:
    mom_MSE_mc_mc_nn_yerr.append(np.sqrt(np.var(mom_MSE_rel)))

ax2.errorbar([53, 115, 474, 2714, 10481], mom_MSE_mc_nn, yerr=mom_MSE_mc_nn_yerr, label="replace level cost", color=color, marker='o')
ax2.errorbar([53, 115, 474, 2714, 10481], mom_MSE_mc_mc_nn, yerr=mom_MSE_mc_mc_nn_yerr, label="add level", color=color, marker='v', linestyle="dashed")

ax2.tick_params(axis='y', labelcolor=color)

ax1.set_yscale("log")
ax2.set_yscale("log")

ax1.set_xscale("log")
ax2.set_xscale("log")

ax1.set_xlabel('mesh size')

#legend = ax1.legend()


ax1.legend(handles=[plt.plot([], ls="-", marker="s", color="black")[0],
                    plt.plot([], ls="-", marker="o", color="black")[0],
                    plt.plot([], ls="-", marker="v", color="black")[0]],
           #labels=[line1.get_label(), line2.get_label(), line3.get_label()], loc=(0,0.65))
            labels=labels, loc=(0,0.62))


# leg = plt.legend()
# print("leg.legendHandles ", leg.legendHandles)
# leg.legendHandles[0].set_color('black')
# leg.legendHandles[1].set_color('black')

plt.savefig("02_conc_cost_mse.pdf")
plt.show()







#########################################################
#########################################################
#########################################################
####  Cost and moments MSE for different mesh sizes   ###
#########################################################
#
# matplotlib.rcParams.update({'font.size': 13})
#
# fig, ax1 = plt.subplots(figsize=(8, 5))
#
# n_moments = [2, 5, 10, 15, 25, 50, 75, 100]
#
# ## 4LMC - 3 level mlmc + nn level
# # level params: nn, 0.1414, 0.053, 0.02
# L4MC_cost_mlmc_nn = np.array([2273811, 3992483, 4550056, 4866151, 5082585, 5283427, 5314375, 5314375])
# L4MC_cost_mlmc = np.array([3126996, 6382441, 6859122, 7148518, 7470020, 7503018, 7503018, 7503018])
# L4MC_mom_err = [4.5644e-06, 2.5661e-05, 6.4507e-05, 9.3355e-05, 0.00017192, 0.00050367, 0.00071144, 0.0012878]
#
# ## 3LMC - 2 level mlmc + nn level
# # level params: nn, 0.053, 0.02
# L3MC_cost_mlmc_nn = np.array([1823599, 6013119, 6602687, 6612484, 6612484, 6612484, 6612484, 6612484])
# L3MC_cost_mlmc = np.array([5181888, 12339634, 12339634, 12339634, 12339634, 12339634, 12339634, 12339633])
# L3MC_mom_err = [6.0494e-05, 0.0001138, 0.00014756, 0.00017233, 0.00029846, 0.00049786, 0.00078174, 0.00091752]
#
# line1, = ax1.plot(n_moments, L4MC_cost_mlmc_nn/L4MC_cost_mlmc, label="4LMC", marker="s")
# line2, = ax1.plot(n_moments, L3MC_cost_mlmc_nn/L3MC_cost_mlmc, label="3LMC", marker="o")
#
# ax1.set_xscale("log")
# ax1.set_yscale("log")
#
# ax1.set_ylabel('C MLMC / C MLMC + NN(s)')
# ax1.set_xlabel('M')
#
# plt.legend()
# plt.show()


###############################
###############################
##### Training time ###########
###############################
fig, ax = plt.subplots(figsize=(8, 5))


###############
### 02 conc ###
###############
####  L4  ####
n_training_samples = [200, 500, 1000, 1500,  2500, 5000, 7500]
mean_learning_time_cpu = [870, 909, 5233, 9377, 20635, 67308, 137676]

# ax.set_yscale("log")
#ax.set_xscale("log")
ax.plot(n_training_samples, mean_learning_time_cpu)
plt.show()
